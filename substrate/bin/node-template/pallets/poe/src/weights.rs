
//! Autogenerated weights for `pallet_poe`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-02-02, STEPS: `20`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bk-docker-gdxt`, CPU: `Intel(R) Xeon(R) CPU @ 3.10GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ../../../target/release/node-template
// benchmark
// pallet
// --dev
// --pallet
// pallet_poe
// --extrinsic
// *
// --steps
// 20
// --repeat
// 50
// --output
// ./pallets/poe/src/weights.rs
// --template
// ../../.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_poe`.
pub trait WeightInfo {
	fn do_something() -> Weight;
	fn cause_error() -> Weight;
	fn create_claim() -> Weight;
	fn revoke_claim() -> Weight;
	fn transfer_claim() -> Weight;
}

/// Weights for `pallet_poe` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `PoeModule::Something` (r:0 w:1)
	/// Proof: `PoeModule::Something` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_407_000 picoseconds.
		Weight::from_parts(8_701_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PoeModule::Something` (r:1 w:1)
	/// Proof: `PoeModule::Something` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 7_243_000 picoseconds.
		Weight::from_parts(7_417_000, 1489)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PoeModule::Proofs` (r:1 w:1)
	/// Proof: `PoeModule::Proofs` (`max_values`: None, `max_size`: Some(4150), added: 6625, mode: `MaxEncodedLen`)
	fn create_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `7615`
		// Minimum execution time: 17_324_000 picoseconds.
		Weight::from_parts(17_989_000, 7615)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PoeModule::Proofs` (r:1 w:1)
	/// Proof: `PoeModule::Proofs` (`max_values`: None, `max_size`: Some(4150), added: 6625, mode: `MaxEncodedLen`)
	fn revoke_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `7615`
		// Minimum execution time: 17_595_000 picoseconds.
		Weight::from_parts(18_291_000, 7615)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `PoeModule::Proofs` (r:1 w:1)
	/// Proof: `PoeModule::Proofs` (`max_values`: None, `max_size`: Some(4150), added: 6625, mode: `MaxEncodedLen`)
	fn transfer_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `7615`
		// Minimum execution time: 17_677_000 picoseconds.
		Weight::from_parts(18_136_000, 7615)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `PoeModule::Something` (r:0 w:1)
	/// Proof: `PoeModule::Something` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn do_something() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_407_000 picoseconds.
		Weight::from_parts(8_701_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PoeModule::Something` (r:1 w:1)
	/// Proof: `PoeModule::Something` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn cause_error() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `32`
		//  Estimated: `1489`
		// Minimum execution time: 7_243_000 picoseconds.
		Weight::from_parts(7_417_000, 1489)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PoeModule::Proofs` (r:1 w:1)
	/// Proof: `PoeModule::Proofs` (`max_values`: None, `max_size`: Some(4150), added: 6625, mode: `MaxEncodedLen`)
	fn create_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `7615`
		// Minimum execution time: 17_324_000 picoseconds.
		Weight::from_parts(17_989_000, 7615)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PoeModule::Proofs` (r:1 w:1)
	/// Proof: `PoeModule::Proofs` (`max_values`: None, `max_size`: Some(4150), added: 6625, mode: `MaxEncodedLen`)
	fn revoke_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `7615`
		// Minimum execution time: 17_595_000 picoseconds.
		Weight::from_parts(18_291_000, 7615)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `PoeModule::Proofs` (r:1 w:1)
	/// Proof: `PoeModule::Proofs` (`max_values`: None, `max_size`: Some(4150), added: 6625, mode: `MaxEncodedLen`)
	fn transfer_claim() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `7615`
		// Minimum execution time: 17_677_000 picoseconds.
		Weight::from_parts(18_136_000, 7615)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
